#!/usr/bin/python

import sys,string
from collections import defaultdict
import rospy
import roslaunch
from wifi_ddwrt.msg import *
import math
import numpy
import tf
import pickle
from geometry_msgs.msg import *
from nav_msgs.srv import *
from visualization_msgs.msg import *
from StringIO import StringIO
import yaml
from wifi_ddwrt.srv import *

class PosEstimate:
  def __init__(self):
    tasks_file = rospy.get_param('~ddwrt_file')
    self.ddwrt_file = yaml.load(file(tasks_file, 'r'))
    self.aps = self.ddwrt_file["access_points"]
    self.dic = pickle.load(open(self.ddwrt_file["database"],"rb"))
    self.wanted_macadd_list = self.get_list_of_specified_macadd()
    rospy.Subscriber('ddwrt/seen_specified_aps', CellAp, self.seen_specified_aps_cb)
    self.listener = tf.TransformListener()
    self.pub_w_cov = rospy.Publisher('ddwrt/posewithcovariance', PoseWithCovarianceStamped)
    self.pub_pose = rospy.Publisher('ddwrt/pose', PoseStamped)
    self.pub_w_cov_to_initialpose = rospy.Publisher('initialpose', PoseWithCovarianceStamped,latch=True)
    self.s = rospy.Service('wifi_ddwrt/setInitPose',SetInitPose, self.handle_setinitpose)
    self.pose_cov = PoseWithCovarianceStamped()
    self.last_pose_cov = PoseWithCovarianceStamped()
    self.pose     = PoseStamped()
    #initialising posewithcovariancestamped & posestamped
    self.pose_cov.pose.pose.orientation.w = 1.0
    self.last_pose_cov.pose.pose.orientation.w = 1.0
    self.pose.pose.orientation.w = 1.0

    self.inv_fp = {}
    self.fp_keys = []
    self.l_rssi = []
    self.rssi_dict = {}

  def handle_setinitpose(self, req):
    if not self.pose_cov == self.last_pose_cov:
      self.pub_w_cov_to_initialpose.publish(self.pose_cov)
    self.last_pose_cov = self.pose_cov
    b = "initial Pose set"
    return b

  def get_list_of_specified_macadd(self):
    wanted_macadd_list = []
    for ap in self.aps:
      wanted_macadd_list.append(ap["macaddr"])
    wanted_macadd_list = sorted(wanted_macadd_list)
    return wanted_macadd_list


  def sort_by_mac(self,u_dic):
    s_dic = defaultdict(list)
    u_dic_values = list(u_dic.values())
    counter = 0
    for key_ in u_dic.keys():
      n_key = tuple(sorted(list(key_), key=lambda CellSig: CellSig.macaddr))
      s_dic[n_key].append(u_dic_values[counter])
      counter += 1
    
    return s_dic

  def invert_keys(self):
    #1
    inv_fp = defaultdict(list)
    keys_list = self.dic.keys()
    values_list = self.dic.values()

    for x in range(len(self.dic.items())):
      inv_fp[values_list[x]].append(keys_list[x])

    inv_fp = self.sort_by_mac(inv_fp)
    return inv_fp
  
  def get_aps_rssi_list(self,fp_keys):
    #2
    rssi_set = []
    for fp_key in fp_keys:
      l_rssi = []
      for ap in fp_key:
        rssi = ap.signal
        l_rssi.append(rssi)
      rssi_set.append(l_rssi)
    return rssi_set

  def match_rssi_to_pos(self,l_rssi,l_pos):
    nt_conv_dict = defaultdict(list)
    for x in range(len(l_rssi)):
      nt_conv_dict[tuple(l_rssi[x])] = l_pos[x]

    return nt_conv_dict

  def seen_specified_aps_cb(self, cellap):
    #seen_specified_aps has the required aps in the format of (macaddr,essid,rssi)
    self.cellap = cellap
    seen_specified_aps = cellap.aps    
    seen_rssi = []
    
    for ap in seen_specified_aps:
      #A list of macadd-sorted rssi (The currently seen RSSIs)
      seen_rssi.append(int(ap.signal))

    index_absent_aps = self.diff_aps(seen_specified_aps)

    self.convert(seen_rssi,seen_specified_aps,index_absent_aps)
  
  def diff_aps(self,seen_specified_aps):
    index_absent_aps = []
    seen_macaddr = []
    for ap in seen_specified_aps:
      seen_macaddr.append(ap.macaddr)
    s = set(seen_macaddr)
    absent_aps = [x for x in self.wanted_macadd_list if x not in s]
    absent_aps = sorted(absent_aps)
    for ap in absent_aps:
      index_absent_aps.append(self.wanted_macadd_list.index(ap))

    return index_absent_aps

  def convert(self,seen_rssi,seen_specified_aps,index_absent_aps):
    seen_specified_aps = seen_specified_aps
    dic_rssi = self.rssi_dict.keys()
    dic_rssi_arr = numpy.asarray(dic_rssi)
    facto_list = []

    for index in index_absent_aps:
      #setting the absent ap rssi to 0    
      seen_rssi.insert(index, 0)
    seen_rssi = numpy.array(seen_rssi)
    #print seen_rssi
    for x in range(len(self.rssi_dict.keys())):
      for index in index_absent_aps:
        dic_rssi_arr[x][index]= 0									#by setting certain rssi to 0,the keys in the dictionary will not be affected.

      #print dic_rssi_arr[x]
      dist = numpy.linalg.norm(seen_rssi - dic_rssi_arr[x])
      a = dist
      b = self.rssi_dict[dic_rssi[x]][0]								#[0] is added due to the extra set of square brackets
      facto_list.append([a,b])

    self.calculate_covariance(facto_list,seen_specified_aps)


  def calculate_covariance(self, facto_list, seen_specified_aps):
    s_facto_list = sorted(facto_list)
    dummy = len(s_facto_list)* self.ddwrt_file["percentage_taken"]
    for x in range(int(dummy+1)):
      if x == 0:
        arr_pos = numpy.array(s_facto_list[x][1])
      else:
        arr_pos = numpy.vstack([arr_pos,numpy.array(s_facto_list[x][1])])

    arr_pos = arr_pos.T
    covar = numpy.cov(arr_pos)
    mean_xy  = arr_pos.mean(axis=1)									# [x,y]
    
    (trans, rot) = self.listener.lookupTransform('/map', '/base_link', rospy.Time(0))

    self.pose_cov.header = self.cellap.header
    self.pose_cov.header.frame_id = '/map'
    self.pose_cov.pose.pose.position.x    = float(round(mean_xy[0],3))
    self.pose_cov.pose.pose.position.y    = float(round(mean_xy[1],3))
    self.pose_cov.pose.pose.position.z    = float(trans[2])
    self.pose_cov.pose.pose.orientation.x = float(rot[0])
    self.pose_cov.pose.pose.orientation.y = float(rot[1])
    self.pose_cov.pose.pose.orientation.z = float(rot[2])
    self.pose_cov.pose.pose.orientation.w = float(rot[3])
    self.pose_cov.pose.covariance[0]      = covar[0][0]
    self.pose_cov.pose.covariance[1]      = covar[0][1] 
    self.pose_cov.pose.covariance[6]      = covar[1][0] 
    self.pose_cov.pose.covariance[7]      = covar[1][1]


    self.pose.header             = self.cellap.header
    self.pose.pose.position.x    = mean_xy[0]
    self.pose.pose.position.y    = mean_xy[1]
    self.pose.pose.position.z    = trans[2]
    self.pose.pose.orientation.x = rot[0]    
    self.pose.pose.orientation.y = rot[1]
    self.pose.pose.orientation.z = rot[2]
    self.pose.pose.orientation.w = rot[3]
    
    self.pub_w_cov.publish(self.pose_cov)
    self.pub_pose.publish(self.pose)

def approximate():
  rospy.init_node('approximate', anonymous=True)
  pe = PosEstimate()
  pe.inv_fp = pe.invert_keys()									        #an inverted dic.
  pe.fp_keys = list(pe.inv_fp.keys())                                                           
  pe.fp_values = list(pe.inv_fp.values())
  pe.l_rssi = pe.get_aps_rssi_list(pe.fp_keys)
  pe.rssi_dict = pe.match_rssi_to_pos(pe.l_rssi,pe.fp_values)
  rospy.spin()
     
if __name__ == '__main__':
  approximate()
  
