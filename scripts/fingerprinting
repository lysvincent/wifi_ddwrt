#!/usr/bin/python


import sys,string
import rospy
import roslaunch
from wifi_ddwrt.msg import *
import math
import tf
import pickle
import json
from geometry_msgs.msg import *
from nav_msgs.srv import *
from visualization_msgs.msg import *
from StringIO import StringIO
import yaml
from wifi_ddwrt.srv import *


class Fingerprints:
    def __init__(self,listener):
        tasks_file = rospy.get_param('~ddwrt_file')
        self.ddwrt_file = yaml.load(file(tasks_file, 'r'))
        self.aps = self.ddwrt_file["access_points"]
        self.listener = listener
        self.cell_size = self.ddwrt_file["cell_size"]
        self.cell_width= float(self.cell_size["c_width"])
        self.cell_height= float(self.cell_size["c_height"])
        self.check_cell_dimension()
        self.fingerprints = {}
        self.survey_list = []
        self.get_map()
        self.s_macadd_list = self.get_sorted_list_of_specified_macadd()
        self.s_essid_mac_list = self.get_sorted_essid_mac_list()
        rospy.Subscriber('ddwrt/seen_specified_aps', CellAp, self.specAps_cb)
        rospy.Subscriber('ddwrt/sitesurvey', SiteSurvey, self.sitesurvey_cb)
        self.s = rospy.Service('save_list_of_surveyed_aps',SaveList,self.handle_savelist)
        
    def check_cell_dimension(self):
        if self.cell_width > 5:
            self.cell_width = 5
            print "Specified cell width is too large. Cell width is set to 5"
        elif self.cell_width < 1:
            self.cell_width = 1
            print "Specified cell width is too small. Cell width is set to 1"
        else : x = 0

        if self.cell_height > 5:
            self.cell_height = 5
            print "Specified cell height is too large. Cell height is set to 5"
        elif self.cell_height < 1:
            self.cell_height = 1
            print "Specified cell height is too small. Cell height is set to 1"
        else : x = 0

    def get_sorted_list_of_specified_macadd(self):
	#get a sorted macadd list from .yaml
        macadd_list = []
        for ap in self.aps:
            macadd_list.append(ap["macaddr"])
        s_macadd_list = sorted(macadd_list)
        return s_macadd_list

    def get_sorted_essid_mac_list(self):
        essid_mac_list = []
        for ap in self.aps:            
            essid_mac_list.append((ap["macaddr"],ap["essid"]))
        s_essid_mac_list = sorted(essid_mac_list)
        return s_essid_mac_list 
        
    def get_map(self):
        rospy.wait_for_service('static_map')
        try:
            map_service = rospy.ServiceProxy('static_map', GetMap)
            print "Requesting the static map"
            resp = map_service()

            size = (resp.map.info.width, resp.map.info.height)
            self.map_res = resp.map.info.resolution
            self.map_origx= resp.map.info.origin.position.x
            self.map_origy= resp.map.info.origin.position.y
      
        except rospy.ServiceException, e:
            print "The service call to get the map failed"

    def specAps_cb(self, cellap):
        #we need to get the pose of the robot at the time the cellap came in
        #incoming aps are macaddr-sorted
        try:
            (trans, rot) = self.listener.lookupTransform('/map', '/base_link', rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException):
            print "Got an exception that should never happen"
            return
        
        last_trans=[0,0]
        diff_x = round(abs(trans[0]-last_trans[0]),2)
        diff_y = round(abs(trans[1]-last_trans[1]),2)                                              
        #get index of absent aps
        index_absent_aps = self.diff_aps(self.s_macadd_list,cellap.aps)

        for x in index_absent_aps:
            #The APs which are specified but not seen are set to 0
            cellsig = CellSig(self.s_essid_mac_list[x][0], self.s_essid_mac_list[x][1],0)
            cellap.aps.insert(x, cellsig)

        if diff_x >= self.cell_width or diff_y >= self.cell_height:
            pos_x= self.rounding(trans[0],self.cell_width)
            pos_y= self.rounding(trans[1],self.cell_height)
            self.fingerprints[pos_x,pos_y]=tuple(cellap.aps)
            last_trans=trans

    def diff_aps(self,s_macadd_list,related_networks):
        index_absent_aps = []
        seen_macadd = []
        for ap in related_networks:
            seen_macadd.append(ap.macaddr)
        s = set(seen_macadd)
        absent_aps = [x for x in s_macadd_list if x not in s]
        absent_aps = sorted(absent_aps)
        for ap in absent_aps:
            index_absent_aps.append(s_macadd_list.index(ap))

        return index_absent_aps

    def rounding(self, pos, factor):
        counter = 0
        hoF = float(factor)/2
        while pos/factor >= 1.0:
            pos = pos-factor
            counter += 1
        else:
            if float(pos)/hoF >= hoF:
                pos = factor*(counter+1)
                return round(pos,1)
            else:
                pos = counter*factor
                return round(pos,1)

    def save_fingerprints(self):
        pickle.dump(self.fingerprints, open(self.ddwrt_file["database"] ,"wb"))

    def sitesurvey_cb(self, sitesurvey):
        for ap in sitesurvey.networks:
            dic = {}
            dic['macaddr'] = ap.macaddr
            dic['essid']   = ap.essid
            if not any(d['macaddr'] == dic['macaddr'] for d in self.survey_list):
                self.survey_list.append(dic)

    def handle_savelist(self, req):
        name = self.ddwrt_file["list_survey"]
        yaml.dump(self.survey_list,file(name,'w'),default_flow_style = False)
        b = "list_sitesurvey saved"
        return b

def fingerPrints():
    
    rospy.init_node('fingerprinting', anonymous=True)
    listener = tf.TransformListener()
    fp = Fingerprints(listener)
    rospy.spin()
    fp.save_fingerprints()
    
if __name__ == '__main__':
    fingerPrints()
